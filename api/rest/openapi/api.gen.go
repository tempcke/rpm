// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List leases
	// (GET /lease)
	ListLeases(w http.ResponseWriter, r *http.Request)
	// Lease property
	// (POST /lease)
	LeaseProperty(w http.ResponseWriter, r *http.Request)
	// Get Lease
	// (GET /lease/{leaseID})
	GetLease(w http.ResponseWriter, r *http.Request, leaseID string)
	// List properties
	// (GET /property)
	ListProperties(w http.ResponseWriter, r *http.Request)
	// Add Property
	// (POST /property)
	AddProperty(w http.ResponseWriter, r *http.Request)
	// Deletes a property
	// (DELETE /property/{propertyID})
	DeleteProperty(w http.ResponseWriter, r *http.Request, propertyID string)
	// Find property by ID
	// (GET /property/{propertyID})
	GetPropertyById(w http.ResponseWriter, r *http.Request, propertyID string)
	// Store Property
	// (PUT /property/{propertyID})
	StoreProperty(w http.ResponseWriter, r *http.Request, propertyID string)
	// List Tenants
	// (GET /tenant)
	ListTenants(w http.ResponseWriter, r *http.Request)
	// Add Tenant
	// (POST /tenant)
	AddTenant(w http.ResponseWriter, r *http.Request)
	// Get Tenant
	// (GET /tenant/{tenantID})
	GetTenant(w http.ResponseWriter, r *http.Request, tenantID string)
	// Store Tenant
	// (PUT /tenant/{tenantID})
	StoreTenant(w http.ResponseWriter, r *http.Request, tenantID string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List leases
// (GET /lease)
func (_ Unimplemented) ListLeases(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lease property
// (POST /lease)
func (_ Unimplemented) LeaseProperty(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Lease
// (GET /lease/{leaseID})
func (_ Unimplemented) GetLease(w http.ResponseWriter, r *http.Request, leaseID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List properties
// (GET /property)
func (_ Unimplemented) ListProperties(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add Property
// (POST /property)
func (_ Unimplemented) AddProperty(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a property
// (DELETE /property/{propertyID})
func (_ Unimplemented) DeleteProperty(w http.ResponseWriter, r *http.Request, propertyID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find property by ID
// (GET /property/{propertyID})
func (_ Unimplemented) GetPropertyById(w http.ResponseWriter, r *http.Request, propertyID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Store Property
// (PUT /property/{propertyID})
func (_ Unimplemented) StoreProperty(w http.ResponseWriter, r *http.Request, propertyID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Tenants
// (GET /tenant)
func (_ Unimplemented) ListTenants(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add Tenant
// (POST /tenant)
func (_ Unimplemented) AddTenant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Tenant
// (GET /tenant/{tenantID})
func (_ Unimplemented) GetTenant(w http.ResponseWriter, r *http.Request, tenantID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Store Tenant
// (PUT /tenant/{tenantID})
func (_ Unimplemented) StoreTenant(w http.ResponseWriter, r *http.Request, tenantID string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListLeases operation middleware
func (siw *ServerInterfaceWrapper) ListLeases(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLeases(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LeaseProperty operation middleware
func (siw *ServerInterfaceWrapper) LeaseProperty(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LeaseProperty(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLease operation middleware
func (siw *ServerInterfaceWrapper) GetLease(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "leaseID" -------------
	var leaseID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "leaseID", runtime.ParamLocationPath, chi.URLParam(r, "leaseID"), &leaseID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "leaseID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLease(w, r, leaseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListProperties operation middleware
func (siw *ServerInterfaceWrapper) ListProperties(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProperties(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddProperty operation middleware
func (siw *ServerInterfaceWrapper) AddProperty(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddProperty(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProperty operation middleware
func (siw *ServerInterfaceWrapper) DeleteProperty(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "propertyID" -------------
	var propertyID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "propertyID", runtime.ParamLocationPath, chi.URLParam(r, "propertyID"), &propertyID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "propertyID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProperty(w, r, propertyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPropertyById operation middleware
func (siw *ServerInterfaceWrapper) GetPropertyById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "propertyID" -------------
	var propertyID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "propertyID", runtime.ParamLocationPath, chi.URLParam(r, "propertyID"), &propertyID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "propertyID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPropertyById(w, r, propertyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StoreProperty operation middleware
func (siw *ServerInterfaceWrapper) StoreProperty(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "propertyID" -------------
	var propertyID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "propertyID", runtime.ParamLocationPath, chi.URLParam(r, "propertyID"), &propertyID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "propertyID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StoreProperty(w, r, propertyID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTenants operation middleware
func (siw *ServerInterfaceWrapper) ListTenants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTenants(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddTenant operation middleware
func (siw *ServerInterfaceWrapper) AddTenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTenant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTenant operation middleware
func (siw *ServerInterfaceWrapper) GetTenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenantID" -------------
	var tenantID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantID", runtime.ParamLocationPath, chi.URLParam(r, "tenantID"), &tenantID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTenant(w, r, tenantID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StoreTenant operation middleware
func (siw *ServerInterfaceWrapper) StoreTenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenantID" -------------
	var tenantID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantID", runtime.ParamLocationPath, chi.URLParam(r, "tenantID"), &tenantID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, KeyScopes, []string{})

	ctx = context.WithValue(ctx, SecretScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StoreTenant(w, r, tenantID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/lease", wrapper.ListLeases)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/lease", wrapper.LeaseProperty)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/lease/{leaseID}", wrapper.GetLease)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/property", wrapper.ListProperties)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/property", wrapper.AddProperty)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/property/{propertyID}", wrapper.DeleteProperty)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/property/{propertyID}", wrapper.GetPropertyById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/property/{propertyID}", wrapper.StoreProperty)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tenant", wrapper.ListTenants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tenant", wrapper.AddTenant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tenant/{tenantID}", wrapper.GetTenant)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/tenant/{tenantID}", wrapper.StoreTenant)
	})

	return r
}
